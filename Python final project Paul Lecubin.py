import sysimport osimport matplotlib.pyplot as plt!{sys.executable} -m pip install yfinance!{sys.executable} -m pip install pandas!{sys.executable} -m pip install matplotlibimport numpy as npimport pandas as pdimport yfinance as yffrom openpyxl import load_workbook, Workbookfrom openpyxl.drawing.image import Imagefrom openpyxl.chart import LineChart, Reference# calculation of CAPM parametersdef calculate_capm(stock_ticker, market_ticker, risk_free_rate):    stock_data = yf.download(stock_ticker, start='2022-01-01', end='2023-01-01')['Adj Close']    market_data = yf.download(market_ticker, start='2022-01-01', end='2023-01-01')['Adj Close']    stock_returns = stock_data.pct_change().dropna()    market_returns = market_data.pct_change().dropna()    beta, alpha = np.polyfit(market_returns, stock_returns - risk_free_rate, deg=1)    expected_return = risk_free_rate + beta * (market_returns.mean() - risk_free_rate)    required_return = risk_free_rate + beta * (market_returns.max() - risk_free_rate)    return beta, expected_return, required_return# parametersamazon_ticker = 'AMZN'market_ticker = '^GSPC'risk_free_rate = 0.01  # 1We assume the risk-free rate is 1%# CAPMbeta, expected_return, required_return = calculate_capm(amazon_ticker, market_ticker, risk_free_rate)# Print CAPM resultsprint(f"Beta for {amazon_ticker}: {beta:.4f}")print(f"Expected Return: {expected_return:.4f}")print(f"Required Return: {required_return:.4f}")# Save CAPM results to Exceldesktop_path = os.path.join(os.path.expanduser("~"), "Desktop")excel_file_path = os.path.join(desktop_path, f'Final_Results_{amazon_ticker}.xlsx')try:    wb = load_workbook(excel_file_path)except FileNotFoundError:    wb = Workbook()# CAPM_Summary sheetsummary_sheet = wb.create_sheet('CAPM_Summary', 0)summary_sheet['A1'] = 'Beta: 'summary_sheet['B1'] = betasummary_sheet['A2'] = 'Expected Return: 'summary_sheet['B2'] = expected_returnsummary_sheet['A3'] = 'Required Return: 'summary_sheet['B3'] = required_return# Save in desktopwb.save(excel_file_path)# Save in the desktopwb.save(excel_file_path)# New sheet for visual representation visual_sheet = wb.create_sheet('Visual_Representation', 1)# You can replace this with your specific visualizationsstock_data = yf.download(amazon_ticker, start='2022-01-01', end='2023-01-01')['Adj Close']market_data = yf.download(market_ticker, start='2022-01-01', end='2023-01-01')['Adj Close']plt.figure(figsize=(8, 6))plt.plot(stock_data, label=amazon_ticker)plt.plot(market_data, label=market_ticker)plt.title('Stock Prices Comparison')plt.xlabel('Date')plt.ylabel('Adjusted Close Price')plt.legend()plt.savefig(os.path.join(desktop_path, 'stock_prices_comparison.png'))# Add the image to the Excel sheetimg = Image(os.path.join(desktop_path, 'stock_prices_comparison.png'))visual_sheet.add_image(img, 'A1')# Additional Calculation  Average of Stock Pricesaverage_stock_price = stock_data.mean()visual_sheet['B1'] = 'Average Stock Price: 'visual_sheet['C1'] = average_stock_price# Save to desktopwb.save(excel_file_path)# Print a completion messageprint('Your analysis is . Results are well saved on your desktop.')